@model TodoListMVC.ViewModels.TodoListViewModel

@{
    ViewData["Title"] = "Todo List";
}

<div class="container mt-4">
    <div class="row mb-4">
        <div class="col">
            <h1>Todo List</h1>
            <p>
                <a asp-action="Create" class="btn btn-primary">Add New Task</a>
            </p>
        </div>
    </div>

    <!-- Display success or error messages from TempData -->
    @if (TempData["Message"] != null)
    {
        <div class="alert alert-success">
            @TempData["Message"]
        </div>
    }
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger">
            @TempData["Error"]
        </div>
    }

    <div class="row mb-3">
        <div class="col d-flex justify-content-between align-items-center">
            <h3>Tasks</h3>
            <div>
                <span class="me-2">Page: @Model.CurrentPage of @Model.TotalPages</span>
                <a asp-action="Index" asp-route-page="@(Model.CurrentPage - 1)" class="btn btn-sm btn-outline-secondary @(!Model.HasPreviousPage ? "disabled" : "")">
                    Previous
                </a>
                <a asp-action="Index" asp-route-page="@(Model.CurrentPage + 1)" class="btn btn-sm btn-outline-secondary @(!Model.HasNextPage ? "disabled" : "")">
                    Next
                </a>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <div class="list-group">
                @if (!Model.Items.Any())
                {
                    <div class="text-center my-4">
                        <p class="text-muted">No tasks found. Add a new task to get started!</p>
                    </div>
                }
                else
                {
                    @foreach (var item in Model.Items)
                    {
                        string priorityClass = item.Priority switch
                        {
                            1 => "priority-low",
                            3 => "priority-high",
                            _ => "priority-medium"
                        };

                        string priorityText = item.Priority switch
                        {
                            1 => "Low",
                            3 => "High",
                            _ => "Medium"
                        };

                        bool isPastDue = item.DueDate.HasValue && item.DueDate < DateTime.Now && !item.IsCompleted;

                        <div class="list-group-item todo-item d-flex justify-content-between align-items-center @priorityClass @(item.IsCompleted ? "completed" : "")">
                            <div>
                                <div class="d-flex align-items-center">
                                    <div class="form-check me-2">
                                        <form asp-action="Edit" method="post" class="d-inline">
                                            <!-- Hidden input for task ID -->
                                            <input type="hidden" name="id" value="@item.Id" />
                                            <!-- Hidden input for toggling completion status -->
                                            <input type="hidden" name="IsCompleted" value="@(item.IsCompleted ? "false" : "true")" />
                                            <!-- The checkbox itself that toggles completion -->
                                            <input class="form-check-input toggle-complete" type="checkbox" onclick="this.form.submit();" @(item.IsCompleted ? "checked" : "") />
                                        </form>
                                    </div>
                                    <div>
                                        <h5 class="mb-1">@item.Title</h5>
                                        <p class="mb-1 text-muted">@(item.Description ?? "No description")</p>
                                    </div>
                                </div>
                            </div>
                            <div class="text-end">
                                <span class="badge bg-@priorityText.ToLower()">@priorityText</span>
                                <div class="text-muted @(isPastDue ? "text-danger" : "")">
                                    @(item.DueDate.HasValue ? item.DueDate.Value.ToString("g") : "No due date")
                                </div>
                                <div class="mt-2">
                                    <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-outline-primary">Edit</a>
                                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-outline-info">Details</a>
                                    <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-outline-danger">Delete</a>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>
